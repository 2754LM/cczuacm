using CompLib.Util;
using System.Collections.Generic;
using System.Threading;
using static System.Console;

namespace CompLib.Util
{
    using System;
    using System.Linq;

    internal class Scanner
    {
        private string[] _line;
        private int _index;
        private const char Separator = ' ';

        public Scanner()
        {
            _line = System.Array.Empty<string>();
            _index = 0;
        }

        private string Next()
        {
            if (_index < _line.Length) return _line[_index++];
            string s;
            do
            {
                s = Console.ReadLine() ?? string.Empty;
            } while (s.Length == 0);

            _line = s.Split(Separator);
            _index = 0;

            return _line[_index++];
        }

        public string ReadLine()
        {
            _index = _line.Length;
            return Console.ReadLine() ?? string.Empty;
        }

        public int NextInt() => int.Parse(Next());
        public long NextLong() => long.Parse(Next());
        public double NextDouble() => double.Parse(Next());
        public decimal NextDecimal() => decimal.Parse(Next());
        public char NextChar() => Next()[0];
        public char[] NextCharArray() => Next().ToCharArray();

        private IEnumerable<string> Array()
        {
            var s = Console.ReadLine() ?? string.Empty;
            _line = s.Length == 0 ? System.Array.Empty<string>() : s.Split(Separator);
            _index = _line.Length;
            return _line;
        }

        public int[] IntArray() => Array().AsParallel().Select(int.Parse).ToArray();
        public long[] LongArray() => Array().AsParallel().Select(long.Parse).ToArray();
        public double[] DoubleArray() => Array().AsParallel().Select(double.Parse).ToArray();
        public decimal[] DecimalArray() => Array().AsParallel().Select(decimal.Parse).ToArray();
    }
}

internal abstract class Program
{
    private static void Solve()
    {
        var sc = new Scanner();
        var t = 1;
        // t = sc.NextInt();
        for (var i = 0; i < t; i++) Query(sc);
        Out.Flush();
    }

    static Program()
    {
    }

    private const int Inf = 1000_000_007;

    private static void Query(Scanner sc)
    {
        var a = sc.NextInt();
        var b = sc.NextInt();
        WriteLine(a + b);
    }

    // public static void Main() => Solve();
    //手动将方法栈开大
    public static void Main() => new Thread(Solve, 1 << 27).Start();
}