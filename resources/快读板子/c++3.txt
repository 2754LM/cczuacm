namespace FastIO
{
    // ------------------------------
    // #define DISABLE_MMAP
    // ------------------------------
#if ( defined(LOCAL) || defined(_WIN32) ) && !defined(DISABLE_MMAP)
#define DISABLE_MMAP
#endif
#ifdef LOCAL
	inline char gc() { return getchar(); }
	inline void pc(char c) { putchar(c); }
#else
#ifdef DISABLE_MMAP
    inline constexpr int _READ_SIZE = 1 << 18;
    inline static char _read_buffer[_READ_SIZE], *_read_ptr = nullptr, *_read_ptr_end = nullptr;

    inline char gc()
    {
        if (__builtin_expect(_read_ptr == _read_ptr_end, false))
        {
            _read_ptr = _read_buffer, _read_ptr_end = _read_buffer + fread(_read_buffer, 1, _READ_SIZE, stdin);
            if (__builtin_expect(_read_ptr == _read_ptr_end, false)) return EOF;
        }
        return *_read_ptr++;
    }
#else
#include<sys/mman.h>
	inline static const char *_read_ptr = (const char *)mmap(nullptr, 0x7fffffff, 1, 2, 0, 0);
	inline char gc() { return *_read_ptr++; }
#endif
    inline constexpr int _WRITE_SIZE = 1 << 18;
    inline static char _write_buffer[_WRITE_SIZE], *_write_ptr = _write_buffer;

    inline void pc(char c)
    {
        *_write_ptr++ = c;
        if (__builtin_expect(_write_buffer + _WRITE_SIZE == _write_ptr, false))
            fwrite(
                _write_buffer, 1, _write_ptr - _write_buffer, stdout), _write_ptr = _write_buffer;
    }

    inline struct _auto_flush
    {
        ~_auto_flush()
        {
            fwrite(_write_buffer, 1, _write_ptr - _write_buffer, stdout);
        }
    } _auto_flush;
#endif
    template <class T>
    inline constexpr bool _is_signed = numeric_limits<T>::is_signed;
    template <class T>
    inline constexpr bool _is_unsigned = numeric_limits<T>::is_integer && !_is_signed<T>;
#if __SIZEOF_LONG__ == 64
	template <> inline constexpr bool _is_signed < __int128 > = true;
	template <> inline constexpr bool _is_unsigned < __uint128_t > = true;
#endif
    inline void read(char& c)
    {
        do c = gc(); while (!isgraph(c));
    }

    inline void read_cstr(char* s)
    {
        char c = gc();
        while (!isgraph(c)) c = gc();
        while (isgraph(c)) *s++ = c, c = gc();
        *s = 0;
    }

    inline void read(string& s)
    {
        char c = gc();
        s.clear();
        while (!isgraph(c)) c = gc();
        while (isgraph(c)) s.push_back(c), c = gc();
    }

    template <class T, enable_if_t<_is_signed<T>, int>  = 0>
    void read(T& x)
    {
        char c = gc();
        bool f = true;
        x = 0;
        while (!isdigit(c))
        {
            if (c == 45) f = false;
            c = gc();
        }
        if (f) while (isdigit(c)) x = x * 10 + (c & 15), c = gc();
        else while (isdigit(c)) x = x * 10 - (c & 15), c = gc();
    }

    template <class T, enable_if_t<_is_unsigned<T>, int>  = 0>
    void read(T& x)
    {
        char c = gc();
        while (!isdigit(c)) c = gc();
        x = 0;
        while (isdigit(c)) x = x * 10 + (c & 15), c = gc();
    }

    inline void write(char c)
    {
        pc(c);
    }

    inline void write_cstr(const char* s)
    {
        while (*s) pc(*s++);
    }

    inline void write(const string& s)
    {
        for (char c : s) pc(c);
    }

    template <class T, enable_if_t<_is_signed<T>, int>  = 0>
    void write(T x)
    {
        char buffer[numeric_limits<T>::digits10 + 1];
        int digits = 0;
        if (x >= 0) do buffer[digits++] = x % 10 | 48, x /= 10; while (x);
        else
        {
            pc(45);
            do buffer[digits++] = -(x % 10) | 48, x /= 10; while (x);
        }
        while (digits) pc(buffer[--digits]);
    }

    template <class T, enable_if_t<_is_unsigned<T>, int>  = 0>
    void write(T x)
    {
        char buffer[numeric_limits<T>::digits10];
        int digits = 0;
        do buffer[digits++] = x % 10 | 48, x /= 10; while (x);
        while (digits) pc(buffer[--digits]);
    }

    template <int N>
    struct _tuple_io_helper
    {
        template <class... T>
        static void _read(tuple<T...>& x)
        {
            _tuple_io_helper<N - 1>::_read(x), read(get<N - 1>(x));
        }

        template <class... T>
        static void _write(const tuple<T...>& x)
        {
            _tuple_io_helper<N - 1>::_write(x), pc(32), write(get<N - 1>(x));
        }
    };

    template <>
    struct _tuple_io_helper<1>
    {
        template <class... T>
        static void _read(tuple<T...>& x)
        {
            read(get<0>(x));
        }

        template <class... T>
        static void _write(const tuple<T...>& x)
        {
            write(get<0>(x));
        }
    };

    template <class... T>
    void read(tuple<T...>& x)
    {
        _tuple_io_helper<sizeof...(T)>::_read(x);
    }

    template <class... T>
    void write(const tuple<T...>& x)
    {
        _tuple_io_helper<sizeof...(T)>::_write(x);
    }

    template <class T1, class T2>
    void read(pair<T1, T2>& x)
    {
        read(x.first), read(x.second);
    }

    template <class T1, class T2>
    void write(const pair<T1, T2>& x)
    {
        write(x.first), pc(32), write(x.second);
    }

    template <class T1, class... T2>
    void read(T1& x, T2&... y)
    {
        read(x), read(y...);
    }

    template <class... T>
    void read_cstr(char* x, T*... y)
    {
        read_cstr(x), read_cstr(y...);
    }

    template <class T1, class... T2>
    void write(const T1& x, const T2&... y)
    {
        write(x), write(y...);
    }

    template <class... T>
    void write_cstr(const char* x, const T*... y)
    {
        write_cstr(x), write_cstr(y...);
    }

    template <class T>
    void print(const T& x)
    {
        write(x);
    }

    inline void print_cstr(const char* x)
    {
        write_cstr(x);
    }

    template <class T1, class... T2>
    void print(const T1& x, const T2&... y)
    {
        write(x), pc(32), print(y...);
    }

    template <class... T>
    void print_cstr(const char* x, const T*... y)
    {
        write_cstr(x), pc(32), print_cstr(y...);
    }

    inline void println()
    {
        pc(10);
    }

    inline void println_cstr()
    {
        pc(10);
    }

    template <class... T>
    void println(const T&... x)
    {
        print(x...), pc(10);
    }

    template <class... T>
    void println_cstr(const T*... x)
    {
        print_cstr(x...), pc(10);
    }
}