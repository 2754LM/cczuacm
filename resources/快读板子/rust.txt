#![allow(unused_variables)]
#![allow(clippy::large_stack_arrays)]
#![allow(unused_macros)]
#![allow(unused_mut)]
#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(non_upper_case_globals)]

use std::io::{BufRead, Write};
use std::ops::{Add, AddAssign};

//----------------------------递归闭包---------------------------
struct Func<'a, A, F>(&'a dyn Fn(Func<'a, A, F>, A) -> F);

impl<'a, A, F> Clone for Func<'a, A, F> {
    fn clone(&self) -> Self {
        Self(self.0)
    }
}

impl<'a, A, F> Copy for Func<'a, A, F> {}

impl<'a, A, F> Func<'a, A, F> {
    fn call(&self, f: Func<'a, A, F>, x: A) -> F {
        self.0(f, x)
    }
}

fn y<A, R>(g: impl Fn(&dyn Fn(A) -> R, A) -> R) -> impl Fn(A) -> R {
    move |x| (|f: Func<A, R>, x| f.call(f, x))(Func(&|f, x| g(&|x| f.call(f, x), x)), x)
}

//Y组合子使用示例:(多参采用元组传参)
// let dfs = | f: & dyn Fn((usize, i32,bool)) -> bool, (i,sum,s): (usize,i32,bool) | -> bool{
//      if i == n {
//          return sum == 0 & & s;
//       }
//      return f((i + 1, sum + a[i], true)) | | f((i + 1, sum, s)) | |
// f((i + 1, sum - a[i], true));
// };
//----------------------------递归闭包---------------------------

//----------------------------常用函数----------------------------
#[inline]
fn prefix_array<T>(a: &Vec<T>, start: T) -> Vec<T>
where
    T: Add<Output = T> + Copy + AddAssign,
{
    (0..=a.len())
        .scan(start, |x, y| {
            if y == 0 {
                Some(start)
            } else {
                *x += a[y - 1];
                Some(*x)
            }
        })
        .collect::<Vec<T>>()
}

#[inline]
fn suffix_array<T>(a: &Vec<T>, end: T) -> Vec<T>
where
    T: Add<Output = T> + Copy + AddAssign,
{
    let mut tmp = (0..=a.len())
        .rev()
        .scan(end, |x, y| {
            if y == a.len() {
                Some(end)
            } else {
                *x += a[y];
                Some(*x)
            }
        })
        .collect::<Vec<T>>();
    tmp.reverse();
    tmp
}

//----------------------------常用函数----------------------------
macro_rules! __inner_io_prelude {
    ($scanner:ident, $out:ident, $dol:tt) =>
    {
        use crate::io::in_out;
        use crate::io::Scanner;
        use std::io::Write;
        let ($scanner, mut $out) = in_out();
        let mut $scanner = Scanner::new($scanner);
        macro_rules! __inner_input {(mut $a:ident : $type:tt) => {let mut $a: $type = $scanner.next();};($a:ident : $type:tt) => {let $a: $type = $scanner.next();};}
        macro_rules! input {($dol ($dol($idents: ident)+ : $type: tt),*) => {$dol (__inner_input!{$dol ($idents)+: $type})*};}
        macro_rules! put {($dol ($dol format:tt)*) => { let _ = write!($out, $dol ($dol format)*);};}
        macro_rules! puts {($dol ($dol format:tt)*) => { let _ = writeln!($out, $dol ($dol format)*);};}
        macro_rules! read_string_u8 {() => {$scanner.next::<String>().into_bytes()};}
        macro_rules! print_all {($A:expr) => {{for &v in &$A {let _ = write!($out, "{} ", v);}puts!();}};}
        macro_rules! read_usize {($n:expr) => {(0..$n).map(|_|$scanner.next::<usize>()).collect::<Vec<usize>>()};}
        macro_rules! read_i32 {($n:expr) => {(0..$n).map(|_|$scanner.next::<i32>()).collect::<Vec<i32>>()};}
        macro_rules! read_i64 {($n:expr) => {(0..$n).map(|_|$scanner.next::<i64>()).collect::<Vec<i64>>()};}
        macro_rules! read_i128 {($n:expr) => {(0..$n).map(|_|$scanner.next::<i128>()).collect::<Vec<i128>>()};}
        macro_rules! read_tow_array_usize {($n:expr,$m:expr) => {(0..$n).map(|_| read_usize!($m)).collect::<Vec<Vec<usize>>>()};}
        macro_rules! read_tow_array_i32 {($n:expr,$m:expr) => {(0..$n).map(|_| read_i32!($m)).collect::<Vec<Vec<i32>>>()};}
        macro_rules! read_tow_array_i64 {($n:expr,$m:expr) => {(0..$n).map(|_| read_i64!($m)).collect::<Vec<Vec<i64>>>()};}
        macro_rules! read_tow_array_i128 {($n:expr,$m:expr) => {(0..$n).map(|_| read_i128!($m)).collect::<Vec<Vec<i128>>>()};}
        macro_rules! count_bit {($n:expr) => {{let (mut ans, mut k) = (0_usize, $n);while k > 0 {ans += 1;k &= k - 1;}ans}};}
    };
}

macro_rules! io_prelude {
    ($scanner:ident, $out:ident) => { __inner_io_prelude!($scanner, $out, $); };
}

// --------------------------- tools -----------------------------------
mod io {
    use std::fs::File;
    use std::io::{stdin, stdout, BufRead, BufReader, BufWriter, Write};

    #[cfg(windows)]
    pub fn in_out() -> (impl BufRead, impl Write) {
        use std::os::windows::prelude::{AsRawHandle, FromRawHandle};
        unsafe {
            let stdin = File::from_raw_handle(stdin().as_raw_handle());
            let stdout = File::from_raw_handle(stdout().as_raw_handle());
            (BufReader::new(stdin), BufWriter::new(stdout))
        }
    }

    #[cfg(unix)]
    pub fn in_out() -> (impl BufRead, impl Write) {
        use std::os::unix::prelude::{AsRawFd, FromRawFd};
        unsafe {
            let stdin = File::from_raw_fd(stdin().as_raw_fd());
            let stdout = File::from_raw_fd(stdout().as_raw_fd());
            (BufReader::new(stdin), BufWriter::new(stdout))
        }
    }

    pub struct Scanner<R> {
        reader: R,
        buf_str: Vec<u8>,
        buf_iter: std::str::SplitAsciiWhitespace<'static>,
    }

    impl<R: BufRead> Scanner<R> {
        pub fn new(reader: R) -> Self {
            Self {
                reader,
                buf_str: Vec::new(),
                buf_iter: "".split_ascii_whitespace(),
            }
        }
        pub fn next<T: std::str::FromStr>(&mut self) -> T {
            loop {
                if let Some(token) = self.buf_iter.next() {
                    return token.parse().ok().expect("Failed parse");
                }
                unsafe {
                    self.buf_str.set_len(0);
                }
                self.reader
                    .read_until(b'\n', &mut self.buf_str)
                    .expect("Failed read");
                self.buf_iter = unsafe {
                    let slice = std::str::from_utf8_unchecked(&self.buf_str);
                    std::mem::transmute(slice.split_ascii_whitespace())
                }
            }
        }
    }
}
mod random {
    use std::time::SystemTime;

    const NN: usize = 312;
    const MM: usize = 156;
    const MATRIX_A: u64 = 0xB5026F5AA96619E9;
    const UM: u64 = 0xFFFFFFFF80000000;
    const LM: u64 = 0x7FFFFFFF;
    const F: u64 = 6364136223846793005;
    const MAG01: [u64; 2] = [0, MATRIX_A];

    pub struct Random {
        mt: [u64; NN],
        index: usize,
    }

    impl Random {
        pub fn new(seed: u64) -> Self {
            let mut res = Self {
                mt: [0u64; NN],
                index: NN,
            };
            res.mt[0] = seed;
            for i in 1..NN {
                res.mt[i] = F
                    .wrapping_mul(res.mt[i - 1] ^ (res.mt[i - 1] >> 62))
                    .wrapping_add(i as u64);
            }
            res
        }
        pub fn gen(&mut self) -> u64 {
            if self.index == NN {
                for i in 0..(NN - MM) {
                    let x = (self.mt[i] & UM) | (self.mt[i + 1] & LM);
                    self.mt[i] = self.mt[i + MM] ^ (x >> 1) ^ MAG01[(x & 1) as usize];
                }
                for i in (NN - MM)..(NN - 1) {
                    let x = (self.mt[i] & UM) | (self.mt[i + 1] & LM);
                    self.mt[i] = self.mt[i + MM - NN] ^ (x >> 1) ^ MAG01[(x & 1) as usize];
                }
                let x = (self.mt[NN - 1] & UM) | (self.mt[0] & LM);
                self.mt[NN - 1] = self.mt[MM - 1] ^ (x >> 1) ^ MAG01[(x & 1) as usize];
                self.index = 0;
            }
            let mut x = self.mt[self.index];
            self.index += 1;
            x ^= (x >> 29) & 0x5555555555555555;
            x ^= (x << 17) & 0x71D67FFFEDA60000;
            x ^= (x << 37) & 0xFFF7EEE000000000;
            x ^= x >> 43;
            x
        }
        pub fn next(&mut self, n: u64) -> u64 {
            self.gen() % n
        }
        pub fn next_bounds(&mut self, f: u64, t: u64) -> u64 {
            f + self.next(t - f + 1)
        }
    }

    static mut RAND: Option<Random> = None;

    pub fn random() -> &'static mut Random {
        unsafe {
            if RAND.is_none() {
                RAND = Some(Random::new(
                    (SystemTime::UNIX_EPOCH.elapsed().unwrap().as_nanos() & 0xFFFFFFFFFFFFFFFF)
                        as u64,
                ));
            }
            RAND.as_mut().unwrap()
        }
    }

    pub trait Shuffle {
        fn shuffle(&mut self);
    }

    impl<T> Shuffle for &mut [T] {
        fn shuffle(&mut self) {
            let len = self.len();
            for i in 0..len {
                let at = (random().gen() % ((i + 1) as u64)) as usize;
                self.swap(i, at);
            }
        }
    }
}
//----------------------------Test------------------------------常用板子书写区

//----------------------------Test------------------------------常用板子书写区
//-----------------------------main-------------------------------------主逻辑书写区

#[inline]
pub fn solve() {
    io_prelude!(scanner, out);
    //-----------------------------------------------------------------
    input! {a:i32,b:i32}
    puts!("{}", a + b);
}

//-----------------------------main-------------------------------------主逻辑书写区
fn main() {
    solve();
}
